!function(r,t){if("function"==typeof define&&define.amd)define(["exports"],t);else if("undefined"!=typeof exports)t(exports);else{var i={exports:{}};t(i.exports),r.canvas=i.exports}}(this,function(r){"use strict";function t(r){if(Array.isArray(r)){for(var t=0,i=Array(r.length);t<r.length;t++)i[t]=r[t];return i}return Array.from(r)}function i(r,t){if(!(r instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(r,"__esModule",{value:!0});var e=function(){function r(r,t){var i=[],e=!0,o=!1,a=void 0;try{for(var n,s=r[Symbol.iterator]();!(e=(n=s.next()).done)&&(i.push(n.value),!t||i.length!==t);e=!0);}catch(r){o=!0,a=r}finally{try{!e&&s.return&&s.return()}finally{if(o)throw a}}return i}return function(t,i){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return r(t,i);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function r(r,t){for(var i=0;i<t.length;i++){var e=t[i];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(r,e.key,e)}}return function(t,i,e){return i&&r(t.prototype,i),e&&r(t,e),t}}(),a=function(){function r(){i(this,r),this.canvas=document.getElementById("canvas"),this.cxt=canvas.getContext("2d"),this.width=this.canvas.width=this.canvas.offsetWidth,this.height=this.canvas.height=this.canvas.offsetHeight,this.bounds=this.canvas.getBoundingClientRect(),this.ball_count=5,this.line_range=150,this.r_range=[100,200],this.color=[[0,64,121],[80,5,121]],this.period=10,this.opacity=[.3,.8],this.speed=[-2,2],this.balls=[],this.clickHandle=this.clickHandle.bind(this),this.bindEvent(),this.start()}return o(r,[{key:"bindEvent",value:function(){this.canvas.addEventListener("click",this.clickHandle,!1)}},{key:"unbindEvent",value:function(){this.canvas.removeEventListener("click",this.clickHandle,!1)}},{key:"clickHandle",value:function(r){if(this.isAnimate)return this.isAnimate=!1;this.start();r.clientX,this.bounds.left,r.clientY,this.bounds.top}},{key:"start",value:function(){var r=this;if(this.isAnimate)return!1;for(var t=0;t<this.ball_count;t++)this.addBall();this.isAnimate=!0;var i=function t(){if(!r.isAnimate)return!1;r.render(),r.update(),requestAnimationFrame(t)};requestAnimationFrame(i)}},{key:"getColorList",value:function(r){for(var t=this,i=[this.color[1][0]-this.color[0][0],this.color[1][1]-this.color[0][1],this.color[1][2]-this.color[0][2]],e=Math.max(Math.abs(i[0]),Math.abs(i[1]),Math.abs(i[2]))*r,o=i.map(function(r){return r/e}),a=[],n=0;n<e;n++)!function(r){a.push(o.map(function(i,e){return t.color[0][e]+i*r}))}(n);return a}},{key:"addBall",value:function(){var r={vx:this.getRandomNumber(this.speed),vy:this.getRandomNumber(this.speed),opacity:this.getRandomNumber(this.opacity),freq:this.period,type:~~this.getRandomNumber([0,3]),cur_i:0,reverse:!1};if(r.r=(1-r.opacity)*(this.r_range[1]-this.r_range[0])+this.r_range[0],r.x=this.getRandomNumber([r.r,this.width-r.r]),r.y=this.getRandomNumber([r.r,this.height-r.r]),r.ColorList=this.getColorList(r.freq),this.isOverlap(r))return this.addBall();var i=this.color[0];switch(r.color=[].concat(t(i)),r.type){case 0:break;case 1:r.empty={r:this.getRandomNumber([r.r/2,r.r/4*3])};break;case 2:r.empty={r:this.getRandomNumber([r.r/2,r.r/4*3])},r.son={r:this.getRandomNumber([r.empty.r/2,r.empty.r/4*3]),color:[].concat(t(r.color))}}this.balls.push(r)}},{key:"isOverlap",value:function(r){return!this.balls.every(function(t){return!(Math.sqrt(Math.pow(r.x-t.x,2)+Math.pow(r.y-t.y,2))<=r.r+t.r)})}},{key:"addMirrorBall",value:function(r,t){var i={};for(var e in r)void 0!==t[e]?i[e]=t[e]:i[e]=r[e];return i}},{key:"render",value:function(r){var t=this;this.cxt.clearRect(0,0,this.width,this.height),Array.from(this.balls,function(r){t.renderBall(r),r.x<r.r?r.mirror||(r.mirror=t.addMirrorBall(r,{x:r.x+t.width,mirror:null})):r.x>t.width-r.r?r.mirror||(r.mirror=t.addMirrorBall(r,{x:r.x-t.width,mirror:null})):r.y<r.r?r.mirror||(r.mirror=t.addMirrorBall(r,{y:r.y+t.height,mirror:null})):r.y>t.height-r.r?r.mirror||(r.mirror=t.addMirrorBall(r,{y:r.y-t.height,mirror:null})):r.mirror&&(r.mirror=null),r.mirror&&t.renderBall(r.mirror,r)})}},{key:"renderBall",value:function(r,t){var i=this,e=r.x,o=r.y;r.isCrash&&(r.color=[0,0,0]),this.renderArc(e,o,r.r,this.getRGBA(r.color,r.opacity)),this.cxt.globalCompositeOperation="destination-out",r.type>0&&this.renderArc(e,o,r.empty.r,"#fff"),this.cxt.globalCompositeOperation="source-over",2===r.type&&this.renderArc(e,o,r.son.r,this.getRGBA(r.son.color,r.opacity)),Array.from(this.balls,function(a){if(r===a)return!1;var n=Math.sqrt(Math.pow(e-a.x,2)+Math.pow(o-a.y,2));if(n<i.line_range&&n>r.r+a.r){var s=i.cxt.createLinearGradient(e,o,a.x,a.y);1===r.type?(s.addColorStop(0,i.getRGBA(r.color,1-n/i.line_range)),s.addColorStop(r.empty.r/n,i.getRGBA(r.color,1-n/i.line_range)),s.addColorStop(r.empty.r/n,"transparent")):2===r.type?(s.addColorStop(0,"transparent"),s.addColorStop(r.son.r/n,"transparent"),s.addColorStop(r.son.r/n,i.getRGBA(r.color,1-n/i.line_range)),s.addColorStop(r.empty.r/n,i.getRGBA(r.color,1-n/i.line_range)),s.addColorStop(r.empty.r/n,"transparent")):s.addColorStop(0,"transparent"),s.addColorStop(r.r/n,"transparent"),s.addColorStop(r.r/n,i.getRGBA(r.color,1-n/i.line_range)),s.addColorStop(1-a.r/n,i.getRGBA(a.color,1-n/i.line_range)),s.addColorStop(1-a.r/n,"transparent"),s.addColorStop(1,"transparent"),i.cxt.strokeStyle=s,i.renderLine(e,o,a.x,a.y)}else n<r.r+a.r&&!a.isCrash&&!r.isCrash&&(r.isCrash=!0,a.isCrash=!0,i.crashHandle(r,a),t&&(t.isCrash=!0,t.vx=r.vx,t.vy=r.vy),r.mirror&&(r.mirror.isCrash=!0,r.mirror.vx=r.vx,r.mirror.vy=r.vy));if(t&&a.mirror){Math.sqrt(Math.pow(e-a.mirror.x,2)+Math.pow(o-a.mirror.y,2))<r.r+a.r&&r.isCrash&&!a.mirror.isCrash&&(r.isCrash=!0,a.mirror.isCrash=!0,i.crashHandle(r,a.mirror),a.isCrash=!0,a.vx=a.mirror.vx,a.vy=a.mirror.vy,t.isCrash=!0,t.vx=r.vx,t.vy=r.vy)}})}},{key:"crashHandle",value:function(r,t){var i=Math.atan2(t.y-r.y,t.x-r.x),e=Math.sqrt(r.vx*r.vx+r.vy*r.vy),o=Math.sqrt(t.vx*t.vx+t.vy*t.vy),a=Math.atan2(r.vy,r.vx),n=Math.atan2(t.vy,t.vx),s=e*Math.cos(a-i),h=e*Math.sin(a-i),l=o*Math.cos(n-i),c=o*Math.sin(n-i),u=l,d=h,v=s,y=c;r.vx=Math.cos(i)*u+Math.cos(i+Math.PI/2)*d,r.vy=Math.sin(i)*u+Math.sin(i+Math.PI/2)*d,t.vx=Math.cos(i)*v+Math.cos(i+Math.PI/2)*y,t.vy=Math.sin(i)*v+Math.sin(i+Math.PI/2)*y}},{key:"update",value:function(){var r=this;this.balls=this.balls.map(function(i){return i.x<-i.r?i.mirror:i.x>r.width+i.r?i.mirror:i.y<-i.r?i.mirror:i.y>r.height+i.r?i.mirror:(i.x+=i.vx,i.y+=i.vy,i.color=i.color.map(function(r,t){return i.cur_i++,i.cur_i===i.ColorList.length&&(i.cur_i=0,i.reverse=!i.reverse),i.ColorList[i.reverse?i.ColorList.length-i.cur_i-1:i.cur_i][t]}),2===i.type&&(i.son.color=[].concat(t(i.color))),i.mirror&&(i.mirror.x+=i.mirror.vx,i.mirror.y+=i.mirror.vy,i.mirror.isCrash&&(i.mirror.isCrash=!1)),i.isCrash&&(i.isCrash=!1),i)})}},{key:"getRGBA",value:function(r,t){return"rgba("+~~r[0]+", "+~~r[1]+", "+~~r[2]+", "+t+")"}},{key:"getRandomNumber",value:function(r,t){var i=e(r,2),o=i[0],a=i[1];return Math.random()*(a-o)+o}},{key:"renderArc",value:function(r,t,i,e){this.cxt.fillStyle=e,this.cxt.beginPath(),this.cxt.arc(r,t,i,0,2*Math.PI,!0),this.cxt.closePath(),this.cxt.fill()}},{key:"renderLine",value:function(r,t,i,e){this.cxt.beginPath(),this.cxt.moveTo(r,t),this.cxt.lineTo(i,e),this.cxt.closePath(),this.cxt.stroke()}},{key:"renderTri",value:function(r,t,i){this.cxt.beginPath(),this.cxt.moveTo(r.x,r.y),this.cxt.lineTo(t.x,t.y),this.cxt.lineTo(i.x,i.y),this.cxt.lineTo(r.x,r.y),this.cxt.closePath(),this.cxt.stroke()}}]),r}();r.default=a});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
