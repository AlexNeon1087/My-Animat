(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(factory());
}(this, (function () { 'use strict';

function ___$insertStyle(css) {
  if (!css) {
    return;
  }
  if (typeof window === 'undefined') {
    return;
  }

  var style = document.createElement('style');

  style.setAttribute('type', 'text/css');
  style.innerHTML = css;
  document.head.appendChild(style);

  return css;
}

___$insertStyle("*, *::before, *::after {\n  box-sizing: border-box; }\n\nbody, div, dl, dt, dd, ul, ol, li,\nh1, h2, h3, h4, h5, h6, pre, code,\nform, fieldset, legend, input, button,\ntextarea, p, blockquote, th, td {\n  margin: 0;\n  padding: 0; }\n\na, a:hover, a:active, a:focus, input, input:hover, input:active, input:focus {\n  outline: none; }\n\nul, ol {\n  list-style: none; }\n\n.factory {\n  position: relative;\n  display: flex;\n  flex: 1;\n  align-self: stretch;\n  padding: 10px;\n  background-color: #000; }\n  .factory::after {\n    content: attr(data-intro);\n    position: absolute;\n    top: 5px;\n    left: 50%;\n    color: #2ECC71;\n    transform: translateX(-50%); }\n\n.factory-container {\n  position: relative;\n  flex: 1;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-between;\n  margin: 25px 10px; }\n  .factory-container .factory-process-wrap {\n    display: flex; }\n  .factory-container .factory-process {\n    position: relative;\n    display: flex;\n    flex: 1;\n    border: 1px solid #FFF; }\n    .factory-container .factory-process .factory-port {\n      position: absolute; }\n      .factory-container .factory-process .factory-port .iconfont {\n        font-size: 13px; }\n      .factory-container .factory-process .factory-port.entry {\n        color: #3498DB; }\n      .factory-container .factory-process .factory-port.export {\n        color: #F1C40F; }\n      .factory-container .factory-process .factory-port.entry.factory-pos-top {\n        left: 10px;\n        top: -25px; }\n      .factory-container .factory-process .factory-port.export.factory-pos-top {\n        right: 10px;\n        top: -25px; }\n      .factory-container .factory-process .factory-port.entry.factory-pos-bottom {\n        left: 10px;\n        bottom: -25px; }\n      .factory-container .factory-process .factory-port.export.factory-pos-bottom {\n        right: 10px;\n        bottom: -25px; }\n      .factory-container .factory-process .factory-port.entry.factory-pos-left {\n        top: 0;\n        left: -25px;\n        width: 0;\n        word-break: break-all; }\n      .factory-container .factory-process .factory-port.export.factory-pos-left {\n        bottom: 0;\n        left: -25px;\n        width: 0;\n        word-break: break-all; }\n      .factory-container .factory-process .factory-port.entry.factory-pos-right {\n        top: 0;\n        right: -10px;\n        width: 0;\n        word-break: break-all; }\n      .factory-container .factory-process .factory-port.export.factory-pos-right {\n        bottom: 0;\n        right: -10px;\n        width: 0;\n        word-break: break-all; }\n    .factory-container .factory-process .code-group {\n      position: relative;\n      height: 100%;\n      flex: 1; }\n    .factory-container .factory-process .code-index {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      opacity: 0.1;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      z-index: 1; }\n    .factory-container .factory-process .code {\n      position: absolute;\n      height: 100%;\n      width: 100%;\n      resize: none;\n      background-color: transparent;\n      color: #ffcd80;\n      font-size: 12px;\n      border-right: 1px solid #FFF;\n      padding: 5px;\n      font-family: 'Montserrat', 'Segoe UI', 'Microsoft Yahei', Helvetica, Arial;\n      z-index: 2; }\n    .factory-container .factory-process .display-area {\n      display: flex;\n      flex-direction: column;\n      top: 0;\n      right: 0;\n      width: 10%;\n      font-size: 12px;\n      min-width: 64px;\n      height: 100%;\n      z-index: 2; }\n      .factory-container .factory-process .display-area .display-item {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        margin: 2px 2px 0 2px;\n        text-align: center;\n        border: 1px solid #FFF;\n        color: #f7acbc; }\n        .factory-container .factory-process .display-area .display-item:last-child {\n          margin-bottom: 2px; }\n        .factory-container .factory-process .display-area .display-item > div {\n          flex: 1;\n          display: flex;\n          justify-content: center;\n          align-items: center; }\n      .factory-container .factory-process .display-area .item-title {\n        color: #FFF;\n        border-bottom: 1px solid #95A5A6; }\n    .factory-container .factory-process.factory-error::after {\n      content: attr(data-error);\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      padding: 20px;\n      background-color: #E74C3C;\n      opacity: 0.9;\n      font-size: 40px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      z-index: 5; }\n    .factory-container .factory-process.factory-code-error::after {\n      content: attr(data-error);\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      padding: 20px;\n      background-color: #E74C3C;\n      opacity: .85;\n      font-size: 18px;\n      z-index: 5; }\n\n.factory-console {\n  display: flex;\n  flex-direction: column; }\n\n.factory-detector {\n  display: flex;\n  flex: 1;\n  width: 380px;\n  margin-top: 40px; }\n  .factory-detector .factory-group {\n    min-width: 40px;\n    display: flex;\n    flex-direction: column;\n    border: 1px solid #FFF;\n    margin: 0 10px;\n    color: #FFF;\n    text-align: center; }\n    .factory-detector .factory-group .factory-group-child-wrap {\n      display: flex;\n      flex: 1; }\n    .factory-detector .factory-group .factory-group-child {\n      display: flex;\n      flex-direction: column;\n      flex: 1;\n      min-width: 40px;\n      border: 1px solid #FFF;\n      margin: 1px; }\n    .factory-detector .factory-group .factory-expect-group-wrap {\n      color: #999; }\n    .factory-detector .factory-group .factory-output-group-wrap {\n      color: #FFF; }\n    .factory-detector .factory-group .factory-item {\n      max-height: 25px;\n      flex: 1;\n      padding: 2px 5px;\n      font-size: 14px; }\n      .factory-detector .factory-group .factory-item > div {\n        flex: 1;\n        white-space: nowrap;\n        letter-spacing: -0.8px; }\n        .factory-detector .factory-group .factory-item > div span:last-child {\n          opacity: .6; }\n    .factory-detector .factory-group .error {\n      color: #E74C3C; }\n    .factory-detector .factory-group .success {\n      color: #2ECC71; }\n    .factory-detector .factory-group .active {\n      background-color: #FFF;\n      color: #000; }\n    .factory-detector .factory-group .group-title {\n      font-size: 12px;\n      padding: 5px 10px;\n      text-align: center;\n      white-space: nowrap;\n      border: 1px solid #FFF;\n      margin: 1px;\n      color: #FFF; }\n\n.factory-panel {\n  margin: 10px 0 0 0;\n  padding: 10px;\n  display: flex;\n  flex-direction: column; }\n  .factory-panel .factory-btn-group, .factory-panel .factory-speed-group {\n    display: flex;\n    align-items: center;\n    margin-bottom: 10px;\n    justify-content: space-between; }\n  .factory-panel .factory-panel-btn {\n    border: none;\n    font-size: 16px;\n    color: #FFF;\n    background-color: transparent;\n    border: 1px solid #FFF;\n    padding: 8px 0;\n    width: 20%;\n    flex: 1;\n    cursor: pointer; }\n    .factory-panel .factory-panel-btn:not(:last-child) {\n      margin-right: 8px; }\n    .factory-panel .factory-panel-btn:not(.disabled):hover, .factory-panel .factory-panel-btn.active {\n      background-color: #FFF;\n      color: #000; }\n    .factory-panel .factory-panel-btn.disabled {\n      opacity: .5;\n      cursor: not-allowed; }\n  .factory-panel .factory-speed {\n    flex: 1;\n    text-align: center; }\n  .factory-panel .factory-msg-group {\n    display: flex;\n    align-items: center;\n    flex: 1;\n    background-color: #FFF;\n    color: #000;\n    padding: 5px 10px; }\n\nbody {\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center; }\n\n#app {\n  font-family: HelveticaNeue-Bold; }\n\n.factory-view {\n  flex: 1;\n  background-color: #000;\n  color: #FFF;\n  height: 100vh;\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n  flex-direction: column; }\n  .factory-view .game-prev-group {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center; }\n    .factory-view .game-prev-group.hide {\n      display: none; }\n  .factory-view .title-group {\n    margin: 150px 0 100px 0;\n    position: relative; }\n    .factory-view .title-group .game-title {\n      font-size: 60px;\n      position: relative;\n      animation: restlessly 2s infinite; }\n    .factory-view .title-group .version {\n      font-size: 12px;\n      position: absolute;\n      bottom: 14px;\n      left: 100%;\n      opacity: 0.5; }\n  .factory-view .game-btn {\n    margin-bottom: 20px;\n    border: none;\n    font-size: 30px;\n    background-color: transparent;\n    color: #FFF;\n    cursor: pointer;\n    animation: breathe 5s infinite; }\n    .factory-view .game-btn:hover {\n      text-shadow: 0 0 5px rgba(255, 255, 255, 0.6); }\n  .factory-view .game-main {\n    display: flex;\n    width: 100%;\n    flex: 1;\n    visibility: hidden; }\n    .factory-view .game-main.show {\n      visibility: visible; }\n  .factory-view .game-btn-group {\n    position: absolute;\n    left: 20px;\n    top: 20px;\n    z-index: 9; }\n    .factory-view .game-btn-group button {\n      border: none;\n      font-size: 16px;\n      margin-right: 10px;\n      background-color: transparent;\n      color: #FFF;\n      cursor: pointer; }\n  .factory-view .game-help {\n    position: fixed;\n    color: #000;\n    font-size: 15px;\n    background-color: #FFF;\n    border-radius: 10px;\n    padding: 20px;\n    z-index: 11;\n    visibility: hidden;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -40%);\n    opacity: 0;\n    transition: all .3s; }\n    .factory-view .game-help.show {\n      opacity: 1;\n      transform: translate(-50%, -50%);\n      visibility: visible; }\n    .factory-view .game-help section:not(:last-child) {\n      margin-bottom: 15px; }\n    .factory-view .game-help h3 {\n      color: #2980B9; }\n    .factory-view .game-help p {\n      margin: 3px 0; }\n    .factory-view .game-help .icon-close {\n      position: absolute;\n      cursor: pointer;\n      right: 15px;\n      top: 15px; }\n      .factory-view .game-help .icon-close:hover {\n        opacity: .8; }\n\n@keyframes restlessly {\n  0% {\n    text-shadow: 3px 2px 0 #E74C3C; }\n  20% {\n    text-shadow: 2px -2px 0 #9B59B6; }\n  40% {\n    text-shadow: -4px 2px 0 #95A5A6; }\n  60% {\n    text-shadow: -3px -2px 0 #27AE60; }\n  80% {\n    text-shadow: 4px 3px 0 #C0392B; }\n  100% {\n    text-shadow: 3px 2px 0 #E74C3C; } }\n\n@keyframes breathe {\n  0% {\n    opacity: 1;\n    text-shadow: 0 0 0px white; }\n  20% {\n    opacity: 0.9;\n    text-shadow: 0 0 5px white; }\n  40% {\n    opacity: 0.8;\n    text-shadow: 0 0 7px white; }\n  50% {\n    opacity: 0.7;\n    text-shadow: 0 0 10px white; }\n  60% {\n    opacity: 0.8;\n    text-shadow: 0 0 7px white; }\n  80% {\n    opacity: 0.9;\n    text-shadow: 0 0 5px white; }\n  100% {\n    opacity: 1;\n    text-shadow: 0 0 0px white; } }\n");

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/*  Factory检测器对象  */
var Detector = function () {
    function Detector(options) {
        classCallCheck(this, Detector);

        // 检测器测试数据数组
        this.items = [];
        Object.assign(this, options);
        this.init();
    }
    /*  初始化  */


    createClass(Detector, [{
        key: 'init',
        value: function init() {
            this.last_output = 0;
            this.success_count = 0;
            this.createDetector();
            this.initIems();
            this.render();
        }
        /*  销毁  */

    }, {
        key: 'destroy',
        value: function destroy() {
            this.wrap.removeChild(this.elem);
        }
        /*  重置  */

    }, {
        key: 'reset',
        value: function reset() {
            this.success_count = 0;
            this.setActive(null, this.input_group);
            if (this.isMultigroup) {
                this.last_output = {};
                for (var key in this.output_group) {
                    this.last_output[key] = 0;
                    this.setActive(null, this.output_group[key].output_cgroup);
                }
                Array.from(this.items, function (obj) {
                    obj.output = {};
                    for (var i in obj.output_el) {
                        obj.output_el[i].textContent = '';
                        obj.output_el[i].className = 'factory-item';
                    }
                });
            } else {
                this.last_output = 0;
                this.setActive(null, this.output_group);
                Array.from(this.items, function (obj) {
                    obj.output_el.textContent = '';
                    obj.output_el.className = 'factory-item';
                });
            }
        }
        /*  创建右侧检测器  */

    }, {
        key: 'createDetector',
        value: function createDetector() {
            this.elem = document.createElement('DIV');
            this.elem.className = 'factory-detector';
            if (this.isMultigroup) {
                this.output_group = {};
                this.last_output = {};
                this.input_group = this.createGroup('IN');
                for (var key in this.data[0].expectant_output) {
                    this.output_group[key] = {};
                    this.last_output[key] = 0;
                    this.output_group[key].el = this.createGroup('OUT.' + key);
                    var el = document.createElement('DIV');
                    el.className = 'factory-group-child-wrap';
                    this.output_group[key].expect_cgroup = this.createChildGroup(el, 'factory-expect-group-wrap');
                    this.output_group[key].output_cgroup = this.createChildGroup(el, 'factory-output-group-wrap');
                    this.output_group[key].exports = [];
                    this.output_group[key].output = [];
                    this.output_group[key].el.appendChild(el);
                }
            } else {
                this.input_group = this.createGroup('IN');
                this.output_group = this.createGroup('OUT');
                this.expect_group = this.createGroup('EXP');
            }
            this.wrap.firstChild ? this.wrap.insertBefore(this.elem, this.wrap.firstChild) : this.wrap.appendChild(this.elem);
        }
        /*  生成各组  */

    }, {
        key: 'createGroup',
        value: function createGroup(name) {
            var elem = document.createElement('DIV');
            elem.className = 'factory-group';
            elem.innerHTML = '<div class="group-title">' + name + '</div>';
            this.elem.appendChild(elem);
            return elem;
        }
        /*  生成子组  */

    }, {
        key: 'createChildGroup',
        value: function createChildGroup(wrap, className) {
            var elem = document.createElement('DIV');
            elem.className = 'factory-group-child ' + className;
            wrap.appendChild(elem);
            return elem;
        }
        /*  生成各项  */

    }, {
        key: 'createItem',
        value: function createItem(value, index, wrap) {
            var elem = document.createElement('DIV');
            elem.className = 'factory-item';
            elem.innerHTML = value !== null ? JSON.stringify(value) : '';
            elem.setAttribute('data-index', index);
            wrap.appendChild(elem);
            return elem;
        }
        /*  初始化各项  */

    }, {
        key: 'initIems',
        value: function initIems() {
            this.items = Array.from(this.data, function (obj, index) {
                return Object.assign({ index: index }, obj);
            });
        }
        /*  绘制  */

    }, {
        key: 'render',
        value: function render() {
            var _this = this;

            Array.from(this.items, function (obj, i) {
                if (_this.isMultigroup) {
                    _this.createItem(obj.input, i, _this.input_group);
                    obj.output_el = {};
                    obj.output = {};
                    for (var key in obj.expectant_output) {
                        var val = obj.expectant_output[key];
                        obj.output_el[key] = _this.createItem(null, i, _this.output_group[key].output_cgroup);
                        _this.createItem(val, i, _this.output_group[key].expect_cgroup);
                        _this.output_group[key].exports.push(val);
                    }
                } else {
                    _this.createItem(obj.input, i, _this.input_group);
                    obj.output_el = _this.createItem(obj.output, i, _this.output_group);
                    _this.createItem(obj.expectant_output, i, _this.expect_group);
                }
            });
        }
        /*  设置input的位置  */

    }, {
        key: 'setInputActive',
        value: function setInputActive(index) {
            this.setActive(index, this.input_group);
        }
        /*  设置当前位置  */

    }, {
        key: 'setActive',
        value: function setActive(index, wrap) {
            var active = wrap.querySelector('.active');
            active && active.classList.remove('active');
            if (typeof index === 'number') {
                var elem = wrap.querySelector('[data-index="' + index + '"]');
                elem && elem.classList.add('active');
            }
        }
        /*  输出值  */

    }, {
        key: 'output',
        value: function output(val, key) {
            var index = this.isMultigroup ? this.last_output[key] : this.last_output;
            if (this.isMultigroup) {
                var obj = this.output_group[key];
                if (index < this.data.length) {
                    var exp = obj.exports[index];
                    var output_el = this.items[index].output_el[key];
                    var mObj = {
                        output: val,
                        expectant_output: exp,
                        output_el: output_el
                    };
                    this.items[index].output[key] = obj.output[index] = val;
                    output_el.textContent = val !== null ? JSON.stringify(val) : '';
                    this.examine(index, mObj);
                    this.setActive(index++, obj.output_cgroup);
                    this.last_output[key] = index;
                    if (index === this.data.length) {
                        this.setActive(null, obj.output_cgroup);
                    }
                }
            } else {
                if (index < this.data.length) {
                    this.items[index].output = val;
                    this.items[index].output_el.textContent = val !== null ? JSON.stringify(val) : '';
                    this.examine(index);
                    this.setActive(index++, this.output_group);
                    this.last_output = index;
                    if (index === this.data.length) {
                        this.setActive(null, this.output_group);
                    }
                }
            }
        }
        /*  检查是否正确  */

    }, {
        key: 'examine',
        value: function examine(index, mObj) {
            var obj = mObj || this.items[index];
            if (this.isDiff(obj.output, obj.expectant_output)) {
                obj.output_el.classList.add('error');
            } else {
                if (this.isMultigroup) {
                    if (!this.isDiff(this.items[index].output, this.items[index].expectant_output)) {
                        this.success_count++;
                    }
                } else {
                    this.success_count++;
                }
                obj.output_el.classList.add('success');
            }
        }
        /*  两个值是否不相等  */

    }, {
        key: 'isDiff',
        value: function isDiff(a, b) {
            if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {
                return true;
            } else if (Array.isArray(a)) {
                return a.length !== b.length || a.some(function (v, i) {
                    return v !== b[i];
                });
            } else if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object') {
                if (Object.keys(a).length !== Object.keys(b).length) return true;
                for (var i in a) {
                    if (a[i] !== b[i]) return true;
                }
                return false;
            }
            return a !== b;
        }
    }]);
    return Detector;
}();

/*  Factory处理器对象  */
var Processor = function () {
    function Processor(options) {
        classCallCheck(this, Processor);

        this._NEXT = null; // 上个过程将覆盖ACC的值
        this._ACC = null; // 处理空间
        this._COM = null; // 存储空间
        this._context = {}; // 代码执行上下文
        this.cur_size = 0; // 当前大小
        Object.assign(this, options);
        this.asyncSize = this.asyncSize.bind(this);
        this.closeError = this.closeError.bind(this);
        this.init();
    }
    /*  绑定事件  */


    createClass(Processor, [{
        key: 'bindEvent',
        value: function bindEvent() {
            this.code.addEventListener('keyup', this.asyncSize);
            this.elem.addEventListener('click', this.closeError);
        }
        /*  注销事件  */

    }, {
        key: 'unbindEvent',
        value: function unbindEvent() {
            this.code.removeEventListener('keyup', this.asyncSize);
            this.elem.removeEventListener('click', this.closeError);
        }
        /*  初始化  */

    }, {
        key: 'init',
        value: function init() {
            this.ports = [];
            this.createProcessor();
            this.bindEvent();
        }
        /*  销毁对象  */

    }, {
        key: 'destroy',
        value: function destroy() {
            this.wrap.removeChild(this.processWrap);
            this.unbindEvent();
        }
        /*  创建一个处理器  */

    }, {
        key: 'createProcessor',
        value: function createProcessor() {
            this.processWrap = document.createElement('DIV');
            this.processWrap.className = 'factory-process-wrap';
            this.processWrap.style.cssText = '\n    width: ' + this.width + ';\n    height: ' + this.height + ';\n    padding: 14px;\n    ';
            this.elem = document.createElement('DIV');
            this.elem.className = 'factory-process';
            this.status === 'error' && this.setError();
            this.code = this.createCode();
            this.displayArea = this.createDisplayArea();
            this.processWrap.appendChild(this.elem);
            this.wrap.appendChild(this.processWrap);
        }
        /*  错误模式  */

    }, {
        key: 'setError',
        value: function setError() {
            this.elem.classList.add('factory-error');
            this.elem.setAttribute('data-error', 'ERROR');
        }
        /*  代码出错  */

    }, {
        key: 'setCodeError',
        value: function setCodeError(err) {
            this.elem.classList.add('factory-code-error');
            this.elem.setAttribute('data-error', err);
            this.factory.pause();
        }
        /*  代码出错遮罩层关闭  */

    }, {
        key: 'closeError',
        value: function closeError() {
            if (this.elem.classList.contains('factory-code-error')) {
                this.elem.classList.remove('factory-code-error');
            }
        }
        /*  创建代码窗口textarea  */

    }, {
        key: 'createCode',
        value: function createCode() {
            var elem = document.createElement('DIV');
            elem.className = 'code-group';
            elem.innerHTML = '<div class="code-index">Processor ' + (this.index + 1) + '</div>';
            var textarea = document.createElement('TEXTAREA');
            textarea.className = 'code';
            if (this.defaultText) {
                textarea.value = this.defaultText || '';
                this.asyncSize(this.defaultText, textarea);
            }
            textarea.removeAttribute('spellcheck');
            elem.appendChild(textarea);
            this.elem.appendChild(elem);
            return textarea;
        }
        /*  创建展示台  */

    }, {
        key: 'createDisplayArea',
        value: function createDisplayArea() {
            var elem = document.createElement('DIV');
            elem.className = 'display-area';
            this.displayNEXT = this.createItem('NEXT', this._NEXT, elem);
            this.displayACC = this.createItem('ACC', this._ACC, elem);
            this.displayCOM = this.createItem('COM', this._COM, elem);
            this.displayStatus = this.createItem('STATUS', this.status, elem);
            this.displaySize = this.createItem('BYTE', this.cur_size + '/' + this.size, elem);
            this.elem.appendChild(elem);
            return elem;
        }
        /*  创建展示台的项目  */

    }, {
        key: 'createItem',
        value: function createItem(name, value, wrap) {
            var elem = document.createElement('DIV');
            elem.className = 'display-item';
            elem.innerHTML = '<div class="item-title">' + name + '</div>';
            var value_elem = document.createElement('DIV');
            value_elem.className = 'item-value';
            value_elem.textContent = value || '';
            elem.appendChild(value_elem);
            wrap && wrap.appendChild(elem);
            return value_elem;
        }
        /*  同步用户输入长度  */

    }, {
        key: 'asyncSize',
        value: function asyncSize(e, el) {
            var value = typeof e === 'string' ? e : e.target.value;
            var formatted_val = value.match(/\S/g);
            this.cur_size = formatted_val ? this.getByteLen(formatted_val) : 0;
            if (this.cur_size > this.size) {
                this.cur_size = this.size;
                var str = '',
                    n = 0;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = value[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var ch = _step.value;

                        str += ch;
                        if (/\S/.test(ch)) {
                            n += ch.match(/[\u4E00-\u9FA5]/g) != null ? 2 : 1;
                        }
                        if (n >= this.size) break;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                el = el || this.code;
                el.value = str;
            }
            if ((typeof e === 'undefined' ? 'undefined' : _typeof(e)) === 'object') this.displaySize.innerHTML = this.cur_size + '/' + this.size;
        }
        /*  得到代码长度  */

    }, {
        key: 'getByteLen',
        value: function getByteLen(str) {
            var len = 0;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = str[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var ch = _step2.value;

                    if (ch.match(/[\u4E00-\u9FA5]/g) !== null) {
                        len += 2;
                    } else {
                        len += 1;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return len;
        }
        /*  处理器传递前判断  */

    }, {
        key: 'transmitACC',
        value: function transmitACC(val, portProcessor) {
            if (!portProcessor) {
                return false;
            } else if (portProcessor instanceof Processor) {
                portProcessor.setNext(val);
            } else if (portProcessor.type === 'entry') {
                return false;
            } else if (portProcessor.type === 'export') {
                val !== null && this.factory.detector && this.factory.detector.output(val, portProcessor.name);
            }
        }
    }, {
        key: 'setCom',
        value: function setCom(val) {
            this._COM = val;
            this.displayCOM.innerHTML = this.formatVal(this._COM);
        }
        /*  设置Status  */

    }, {
        key: 'setStatus',
        value: function setStatus(val) {
            this.status = val;
            this.displayStatus.innerHTML = this.status;
        }
        /*  设置Next值  */

    }, {
        key: 'setNext',
        value: function setNext(val) {
            if (this.status === 'error') return;
            this._NEXT = val;
            this.displayNEXT.innerHTML = this.formatVal(this._NEXT);
        }
        /*  运行  */

    }, {
        key: 'next',
        value: function next() {
            if (this.status === 'error') return false;
            this.isEnd();
            this._ACC !== null && this.executeCode(); // 执行用户的代码
        }
        /*  将NEXT传递给ACC  */

    }, {
        key: 'resetACC',
        value: function resetACC() {
            this._ACC = this._NEXT;
            this.displayACC.textContent = this.formatVal(this._ACC);
            this.setNext(null);
        }
        /*  判断是否全部执行完毕 (全部NEXT和ACC为零)  */

    }, {
        key: 'isEnd',
        value: function isEnd() {
            if (this._ACC === null && this._NEXT === null) {
                this.setStatus('idle');
            } else {
                this.setStatus('run');
            }
        }
        /*  执行用户的代码  */

    }, {
        key: 'executeCode',
        value: function executeCode() {
            var _this = this;

            var code = this.code.value;
            var fn = function fn(context, __ERROR__) {
                try {
                    var withCode = '\n          with (this){\n            return eval(arguments[0])\n          }\n          return code\n        ';
                    new Function(withCode).call(Object.assign({}, _this._context, context), code);
                } catch (err) {
                    console.error(err);
                    __ERROR__(err);
                }
            };
            fn({
                NEXT: this._NEXT,
                ACC: this._ACC,
                COM: this._COM,
                L: function L() {
                    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this._ACC;
                    return _this.transmitACC(val, _this.leftProcessor);
                },
                R: function R() {
                    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this._ACC;
                    return _this.transmitACC(val, _this.rightProcessor);
                },
                T: function T() {
                    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this._ACC;
                    return _this.transmitACC(val, _this.topProcessor);
                },
                B: function B() {
                    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this._ACC;
                    return _this.transmitACC(val, _this.bottomProcessor);
                },
                C: function C() {
                    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                    return _this.setCom(val);
                }
            }, function (err) {
                return _this.setCodeError(err);
            });
        }
        /*  设置进出口  */

    }, {
        key: 'setPort',
        value: function setPort(obj, type) {
            this[obj.pos + 'Processor'] = {
                type: type,
                name: obj.name
            };
            this.ports.push(this.createPortElem(obj, type));
        }
        /*  生产端口元素  */

    }, {
        key: 'createPortElem',
        value: function createPortElem(obj, type) {
            var elem = document.createElement('DIV');
            elem.className = 'factory-port ' + type + ' factory-pos-' + obj.pos;
            elem.innerHTML = (type === 'entry' ? 'IN' : 'OUT') + ' ' + (obj.name || '') + ' <i class="iconfont icon-' + (type === 'entry' ? this.reversePos(obj.pos) : obj.pos) + '-arrow"></i>';
            this.elem.appendChild(elem);
            return elem;
        }
        /*  获得相反方向  */

    }, {
        key: 'reversePos',
        value: function reversePos(pos) {
            var direction = {
                left: 'right',
                right: 'left',
                top: 'bottom',
                bottom: 'top'
            };
            return direction[pos];
        }
        /*  格式化输出值  */

    }, {
        key: 'formatVal',
        value: function formatVal(val) {
            if (!val) {
                return '';
            } else if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {
                return JSON.stringify(val);
            } else {
                return '' + val;
            }
        }
    }]);
    return Processor;
}();

var total = 0;
var missionCreater = function missionCreater() {
    var createMandom = function createMandom() {
        return ~~(Math.random() * 10);
    };
    var input = createMandom();
    var output = input * 2;
    total += output;
    return {
        input: input,
        output: {
            A: input * 2,
            B: total
        }
    };
};
var mission1 = {
    missionCreater: missionCreater,
    intro: 'Mission 0：教程关',
    err: [],
    cols: 3,
    rows: 2,
    size: 256,
    isMultigroup: true,
    entry: {
        '0': {
            pos: 'top'
        }
    },
    export: {
        '2': {
            name: 'A',
            pos: 'top'
        },
        '5': {
            name: 'B',
            pos: 'bottom'
        }
    },
    defaultTexts: {
        '0': '// \u7531 IN \u4F20\u5165\u503C\n\n// NEXT \u4E3A\u4E0B\u4E00\u4E2A\u503C\n// console.log(NEXT)\n\n// ACC \u4E3A\u5F53\u524D\u503C\n// console.log(ACC)\n\n// \u5C06 ACC \u4F20\u7ED9\u53F3\u65B9 Processor\nR(ACC)',
        '1': '// Next \u4ECE\u5DE6\u65B9 Processor \u4F20\u5165\n// console.log(NEXT)\n\n// \u5C06ACC \u4E58\u4EE5 2\nACC = ACC * 2\n\n// \u5C06 ACC \u4F20\u7ED9\u53F3\u65B9 Process\nR(ACC)',
        '2': '// \u5C06 ACC \u8F93\u51FA(OUT A)\nT(ACC)\n\n// \u5C06 ACC \u548C\u5B58\u50A8\u503C COM \u7D2F\u52A0\nACC = COM + ACC\n\n// \u5C06 ACC \u50A8\u5B58\u8FDB COM\nC(ACC)\n\n// \u5C06 ACC \u4F20\u7ED9\u4E0B\u65B9 Process\nB(ACC)\n',
        '5': '// \u5C06 ACC \u8F93\u51FA(OUT B)\n// \u53C2\u6570\u7F3A\u7701\u65F6\uFF0C\u4F20\u9012\u539F\u59CBACC\u503C\nB()\n\n// \u70B9\u51FB \u53F3\u65B9 Next \u6216 Auto\n// \u5C31\u53EF\u4EE5\u987A\u5229\u7684\u8FD0\u884C\u5566\n// \u30FD(\u2267\u0414\u2266)\u30CE\n',
        '3': '\n/*\n*********** \u4ECB\u7ECD *************\n\n* \u5185\u7F6E\u53D8\u91CF\uFF1AACC Next COM\n\n- NEXT  \u4E0B\u4E00\u4E2A\u503C\n- ACC   \u5F53\u524D\u503C\n- COM   \u5B58\u50A8\u503C\n\n* \u5185\u7F6E\u65B9\u6CD5\uFF1AT B L R C\n\n- T B L R \u56DB\u4E2A\u65B9\u5411\u7684\u4F20\u8F93\u65B9\u6CD5\n- C \u8BBE\u7F6E COM \u5B58\u50A8\u503C\n\n*****************************\n*/\n',
        '4': '/*\n*********** \u89C4\u5219 *************\n\n* ACC \u6709\u503C\u65F6 Processor \u624D\u4F1A\u6267\u884C\n\n* \u6BCF\u6B21\u6267\u884C Next \u8986\u76D6 ACC\n\n* COM \u53EA\u80FD\u901A\u8FC7\u65B9\u6CD5C()\u5B58\u50A8\n\n* \u6240\u6709 OUT \u5747\u7B49\u4E8E \u671F\u671B\u503C\u5219\u901A\u5173\n\n*****************************\n*/\n'
    }
};
//# sourceMappingURL=mission1.js.map

var missionCreater$1 = function missionCreater() {
    var createMandom = function createMandom() {
        return ~~(Math.random() * 10);
    };
    var input = createMandom();
    return {
        input: input,
        output: input * 2
    };
};
var mission2 = {
    missionCreater: missionCreater$1,
    intro: 'Mission 1：简单的乘法',
    err: [3, 4],
    cols: 3,
    rows: 3,
    size: 64,
    entry: {
        '0': {
            pos: 'top'
        }
    },
    export: {
        '6': {
            pos: 'bottom'
        }
    }
};
//# sourceMappingURL=mission2.js.map

var missionCreater$2 = function missionCreater() {
    var createMandom = function createMandom() {
        return ~~(Math.random() * 3) - 1;
    };
    var input = createMandom();
    var output = input > 0 ? { 'A': 1, 'B': 0, 'C': 0 } : input === 0 ? { 'A': 0, 'B': 1, 'C': 0 } : { 'A': 0, 'B': 0, 'C': 1 };
    return {
        input: input,
        output: output
    };
};
var mission3 = {
    missionCreater: missionCreater$2,
    intro: 'Mission 2：分类',
    err: [],
    size: 32,
    cols: 3,
    rows: 3,
    isMultigroup: true,
    entry: {
        '1': {
            pos: 'top'
        }
    },
    export: {
        '6': {
            name: 'A',
            pos: 'bottom'
        },
        '7': {
            name: 'B',
            pos: 'bottom'
        },
        '8': {
            name: 'C',
            pos: 'bottom'
        }
    }
};
//# sourceMappingURL=mission3.js.map

var NextA = 0;
var NextB = 0;
var missionCreater$3 = function missionCreater() {
    var createMandom = function createMandom() {
        return ~~(Math.random() * 10);
    };
    var input = createMandom();
    NextA += input;
    NextB = Math.abs(input - NextB);
    return {
        input: input,
        output: {
            A: NextA,
            B: NextB
        }
    };
};
var mission4 = {
    missionCreater: missionCreater$3,
    intro: 'Mission 3：累加 and 差值的绝对值',
    err: [],
    size: 64,
    cols: 2,
    rows: 2,
    isMultigroup: true,
    entry: {
        '0': {
            pos: 'top'
        }
    },
    export: {
        '2': {
            name: 'A',
            pos: 'bottom'
        },
        '3': {
            name: 'B',
            pos: 'bottom'
        }
    }
};
//# sourceMappingURL=mission4.js.map

var missions = [mission1, mission2, mission3, mission4];
//# sourceMappingURL=index.js.map

var initialState = {
    intro: '',
    err: [],
    cols: 3,
    rows: 3,
    size: 64,
    isMultigroup: false,
    entry: {},
    export: {},
    defaultTexts: null,
    missionCreater: null
};
/*  关卡生成器  */
var Missions = {
    initialState: initialState,
    missions: missions
};
//# sourceMappingURL=Missions.js.map

var GameSpeed = {
    baseSpeed: 30,
    minSpeed: 30,
    level: 10
};
/*  Factory游戏对象  */

var Factory = function () {
    function Factory(el, options) {
        classCallCheck(this, Factory);

        // 是否运行中
        this.inService = false;
        // 当前关卡
        this.mission = 0;
        // 测试总数
        this.data_count = 20;
        // 运行速度档次
        this.speed = 5;
        // 当前处理的处理器块
        this.active = 0;
        // 已通过测试数
        this.test_active = 0;
        // 测试总数
        this.test_count = 2;
        // 测试数据数组
        this._data = [];
        // 事件队列
        this._events = [];
        Object.assign(this, options);
        this.elem = el;
        if (!this.elem) {
            console.log('[Factory]: param el is the required.');
            return;
        }
        this.elem.classList.add('factory');
        this.Missions = Missions;
        this.init();
    }
    /*  初始化  */


    createClass(Factory, [{
        key: 'init',
        value: function init() {
            this.initSize();
            this.getMissions();
            this.initMission();
            this.createContaner();
            this.createConsole();
            this.initProcessor();
            this.createDetector();
            this.createPanel();
        }
        /*  切换关卡  */

    }, {
        key: 'refresh',
        value: function refresh() {
            this.pause();
            this.msgGroup.textContent = 'Code Mode';
            this._data = [];
            this.active = 0;
            this.test_active = 0;
            this.inService = false;
            this.getMissions();
            this.initMission();
            this.initProcessor();
            this.createDetector();
        }
        /*  销毁对象  */

    }, {
        key: 'destroy',
        value: function destroy() {
            this.elem.innerHTML = '';
            this._data = [];
            this.active = 0;
            this.test_active = 0;
            this.inService = false;
            this.detector = null;
            while (this._events.length) {
                this._events.shift()();
            }
        }
        /*  初始化容器大小  */

    }, {
        key: 'initSize',
        value: function initSize() {
            this.width = this.elem.offsetWidth;
            this.height = this.elem.offsetHeight;
        }
        /*  生成检测器对象  */

    }, {
        key: 'createDetector',
        value: function createDetector() {
            this.detector && this.detector.destroy();
            this.detector = new Detector({
                wrap: this.console,
                isMultigroup: this.isMultigroup || false,
                factory: this,
                data: this._data
            });
        }
        /*  生成游戏控制面板  */

    }, {
        key: 'createPanel',
        value: function createPanel() {
            this.panel = document.createElement('DIV');
            this.panel.className = 'factory-panel';
            /*  控制台按钮面板  */
            this.btnGroup = document.createElement('DIV');
            this.btnGroup.className = 'factory-btn-group';
            this.nextBtn = this.createBtn('Next', this.next, this.btnGroup);
            this.autoBtn = this.createBtn('Auto', this.auto, this.btnGroup);
            this.resetBtn = this.createBtn('Reset', this.reset, this.btnGroup);
            this.restartBtn = this.createBtn('Restart', this.restart, this.btnGroup);
            /*  消息面板  */
            this.msgGroup = document.createElement('DIV');
            this.msgGroup.className = 'factory-msg-group';
            this.msgGroup.textContent = 'Code Mode';
            /*  执行速度面板  */
            this.speedGroup = document.createElement('DIV');
            this.speedGroup.className = 'factory-speed-group';
            this.slowBtn = this.createBtn('Slow', this.slow, this.speedGroup);
            this.speedDisplay = document.createElement('DIV');
            this.speedDisplay.className = 'factory-speed';
            this.setSpeed(this.speed);
            this.speedGroup.appendChild(this.speedDisplay);
            this.fastBtn = this.createBtn('Fast', this.fast, this.speedGroup);
            this.panel.appendChild(this.speedGroup);
            this.panel.appendChild(this.btnGroup);
            this.panel.appendChild(this.msgGroup);
            this.console.appendChild(this.panel);
        }
        /*  设置速度  */

    }, {
        key: 'setSpeed',
        value: function setSpeed(speed) {
            this.speed = speed;
            this._interval = GameSpeed.baseSpeed * GameSpeed.level + GameSpeed.minSpeed - this.speed * GameSpeed.baseSpeed;
            this.speedDisplay.textContent = 'Speed: ' + this.speed;
            this.resetTimer();
        }
        /*  加快速度  */

    }, {
        key: 'fast',
        value: function fast() {
            if (this.fastBtn.classList.contains('disabled')) return false;
            this.speed === 1 && this.slowBtn.classList.remove('disabled');
            this.setSpeed(this.speed + 1);
            this.speed === 10 && this.fastBtn.classList.add('disabled');
        }
        /*  加快速度  */

    }, {
        key: 'slow',
        value: function slow() {
            if (this.slowBtn.classList.contains('disabled')) return false;
            this.speed === 10 && this.fastBtn.classList.remove('disabled');
            this.setSpeed(this.speed - 1);
            this.speed === 1 && this.slowBtn.classList.add('disabled');
        }
        /*  生成控制按钮  */

    }, {
        key: 'createBtn',
        value: function createBtn(name, fn, wrap) {
            var btn = document.createElement('BUTTON');
            btn.className = 'factory-panel-btn';
            btn.textContent = name;
            fn = fn.bind(this);
            btn.addEventListener('click', fn, false);
            this._events.push(function () {
                return btn.removeEventListener('click', fn, false);
            });
            wrap.appendChild(btn);
            return btn;
        }
        /*  生成游戏主体容器  */

    }, {
        key: 'createContaner',
        value: function createContaner() {
            this.container = document.createElement('DIV');
            this.container.className = 'factory-container';
            this.elem.appendChild(this.container);
        }
        /*  生成右侧控制台  */

    }, {
        key: 'createConsole',
        value: function createConsole() {
            this.console = document.createElement('DIV');
            this.console.className = 'factory-console';
            this.elem.appendChild(this.console);
        }
        /*  得到关卡数据  */

    }, {
        key: 'getMissions',
        value: function getMissions() {
            var status = this.Missions.missions[this.mission];
            if (!status) {
                alert('你已全部通关（撒花 ☆:✿.٩(๑❛ᴗ❛๑)۶°*✿');
            } else {
                this.isMultigroup = false;
                this.curMission = Object.assign({}, this.Missions.initialState, status);
            }
        }
        /*  设置关卡  */

    }, {
        key: 'initMission',
        value: function initMission() {
            this.curMission.intro && this.elem.setAttribute('data-intro', this.curMission.intro);
            this.elem.offsetWidth;
            for (var i = 0; i < this.data_count; i++) {
                var d = this.curMission.missionCreater && this.curMission.missionCreater();
                this._data.push({
                    input: d.input,
                    output: null,
                    expectant_output: d.output,
                    result: 'pending'
                });
            }
        }
        /*  初始化处理器  */

    }, {
        key: 'initProcessor',
        value: function initProcessor() {
            var _this = this;

            this._processors && Array.from(this._processors, function (processor) {
                return processor.destroy();
            });
            this._processors = [];
            for (var i = 0, total_num = this.curMission.cols * this.curMission.rows; i < total_num; i++) {
                this._processors.push(new Processor({
                    width: ~~(100 / this.curMission.cols) + '%',
                    height: ~~(100 / this.curMission.rows) + '%',
                    status: this.curMission.err && this.curMission.err.indexOf(i) > -1 ? 'error' : 'idle',
                    size: this.curMission.size,
                    wrap: this.container,
                    defaultText: this.curMission.defaultTexts && this.curMission.defaultTexts[i],
                    factory: this,
                    index: i
                }));
            }
            Array.from(this._processors, function (processor, i) {
                processor.leftProcessor = i % _this.curMission.cols ? _this._processors[i - 1] || null : null;
                processor.rightProcessor = (i + 1) % _this.curMission.cols ? _this._processors[i + 1] || null : null;
                processor.topProcessor = _this._processors[i - _this.curMission.cols] || null;
                processor.bottomProcessor = _this._processors[i + _this.curMission.cols] || null;
                if (_this.curMission.entry[i]) {
                    processor.setPort(_this.curMission.entry[i], 'entry');
                }
                if (_this.curMission.export[i]) {
                    processor.setPort(_this.curMission.export[i], 'export');
                }
            });
        }
        /*  运行中禁止代码输入  */

    }, {
        key: 'unableCodeInput',
        value: function unableCodeInput(bool) {
            /*  分别执行  */
            Array.from(this._processors, function (processor) {
                bool ? processor.code.setAttribute('disabled', true) : processor.code.removeAttribute('disabled');
            });
        }
        /*  游戏开始  */

    }, {
        key: 'auto',
        value: function auto() {
            var _this2 = this;

            if (this.timer) return this.pause();
            this.autoBtn.textContent = 'pause';
            this.autoBtn.classList.add('active');
            this.timer = setInterval(function () {
                _this2.next();
            }, this._interval);
        }
    }, {
        key: 'resetTimer',
        value: function resetTimer() {
            var _this3 = this;

            if (!this.timer) {
                return false;
            }
            this.next();
            clearInterval(this.timer);
            this.timer = null;
            this.timer = setInterval(function () {
                _this3.next();
            }, this._interval);
        }
        /*  游戏暂停  */

    }, {
        key: 'pause',
        value: function pause() {
            this.autoBtn.textContent = 'Auto';
            this.autoBtn.classList.remove('active');
            clearInterval(this.timer);
            this.timer = null;
        }
        /*  关卡结束  */

    }, {
        key: 'end',
        value: function end() {
            if (this.detector.success_count === this._data.length) {
                if (this.test_active === this.test_count) {
                    this.pause();
                    this.msgGroup.textContent = '你通关了, 点GO进入下一关:)';
                    if (!this.nextMissionBtn) {
                        this.nextMissionBtn = this.createBtn('Go', this.nextMission, this.btnGroup);
                    }
                } else {
                    this.createDetector();
                    this.test_active++;
                    this.active = 0;
                    this.detector.success_count = 0;
                    this.msgGroup.textContent = 'Running Mode\uFF1A\u5DF2\u901A\u8FC7\u6D4B\u8BD5\uFF08' + this.test_active + '/' + (this.test_count + 1) + '\uFF09';
                    Array.from(this._processors, function (processor) {
                        return processor.setCom(null);
                    });
                }
            } else {
                this.pause();
                this.msgGroup.textContent = '\u51FA\u9519\u4E86' + (this._data.length - this.detector.success_count) + '\u4E2A, \u70B9\u51FBReset\u518D\u6539\u6539';
            }
        }
        /*  下一关  */

    }, {
        key: 'nextMission',
        value: function nextMission() {
            this.mission = this.mission + 1;
            this.refresh();
            var unbindFn = this._events.pop();
            unbindFn.apply(this);
            this.nextMissionBtn && this.btnGroup.removeChild(this.nextMissionBtn);
            this.nextMissionBtn = null;
        }
        /*  关卡重置  */

    }, {
        key: 'restart',
        value: function restart() {
            return this.refresh();
        }
        /*  运行重置  */

    }, {
        key: 'reset',
        value: function reset() {
            this.active = 0;
            this.test_active = 0;
            this.inService = false;
            this.unableCodeInput(false);
            this.detector.reset();
            this.msgGroup.textContent = 'Code Mode';
            Array.from(this._processors, function (processor) {
                processor._NEXT = '';
                processor.setCom(null);
                processor.resetACC();
            });
        }
        /*  执行下一步  */

    }, {
        key: 'next',
        value: function next() {
            if (this.active < this._data.length) {
                this.detector.setInputActive(this.active);
                this.getNext();
                if (!this.inService) {
                    this.inService = true;
                    this.msgGroup.textContent = 'Running Mode';
                    this.unableCodeInput(true);
                }
                this.active++;
            } else {
                this.detector.setInputActive();
            }
            /*  全部重置值  */
            Array.from(this._processors, function (processor) {
                processor.resetACC();
            });
            this.getNext();
            /*  分别执行  */
            Array.from(this._processors, function (processor) {
                processor.next();
            });
            /*  判断是否全部停滞  */
            !this._processors.some(function (processor) {
                return processor.status === 'run';
            }) && this.end();
        }
        /*  入口得到Next值  */

    }, {
        key: 'getNext',
        value: function getNext() {
            for (var key in this.curMission.entry) {
                this._data[this.active] && this._processors[key].setNext(this._data[this.active].input);
            }
        }
    }]);
    return Factory;
}();

var game = new Factory(document.getElementById('app'));
console.log(game);
//# sourceMappingURL=main.js.map

})));
//# sourceMappingURL=main.min.js.map
